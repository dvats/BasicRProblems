# Vectors and matrices

We divide the book into sections, based on the topics on which the exercises are based.

## Vector based coding

R is most suitable for vector based coding. Which means that many tasks that are done element-wise in languages like C/C++ can be done elegantly in R. Below are some exercises to get you started. A new vector can be declared in many ways, below is my default

```{r}
#| eval: TRUE
#| code-fold: FALSE
new <- numeric(length = 5)
new

new_again <- c(1,4,6)
```

One can access elements of a vector by using square brackets:

```{r}
#| eval: TRUE
#| code-fold: FALSE
new_again[3]
```

Below are some practice questions on this topic.

1.  Write a function in R to calculate the sum of the first n natural numbers. Verify your result with the formula $\frac{n(n+1)}{2}$

    ```{r}
    sum_of_natural_num = function(n)
    {
      # use for loop to access every number and sum them one by one in a varibale 
      sum = 0
      for (i in 1:n)
      {
        sum = sum + i
      }
      return(sum)
    }

    ```

2.  Write a function in R to calculate the arithmetic mean of a vector of numbers.

    ```{r}
    arithmetic_mean = function(vec)
    {
      sum = sum(vec)
      Ar_mean = sum/length(vec)
      return(Ar_mean)
    }

    # another way
    arithmetic_mean <- function(vec) mean(vec)
    ```

    3. Write a function in R to calculate the variance of a vector of numbers. Verify with the built-in var() function.

3.  Create a vector of the first 500 even integers. Then, calculate the product of all elements in this vector.

    ```{r}
    # this is the vector
    even_seq = seq(from = 2, by = 2 , length.out = 500)
    # product of the elements
    prod(even_seq)
    ```

4.  Define a vector of the first 1000 numbers in :

    i.  Arithmetic progression of 7 with common difference of 13. That is, create the sequence $a_t$ such that $a_1 = 7$ and $a_{t+1} - a_{t} = 13$ for all $t \geq 1$.

        ```{r}
        a1 <- 7
        d <- 13
        n <- 1000
        arithmetic_progression <- a1 + (0:(n-1)) * d
        ```

    ii. Geometric progression of 7 with common ratio of 1/13. That is, create the sequence $a_t$ such that $a_t = 7$ and $a_{t+1}/a_t = 1/13$

        ```{r}
        a1 <- 7
        r <- 1/13
        geometric_progression <- a1 * r^(0:(n-1))
        ```

5.  Write a function which generates first `n` numbers in Fibonacci sequence.

    ```{r}
    fibonacci_sequence <- function(n) 
    {
      if (n <= 0) {
        return("Enter a natural number")  
      } else if (n == 1) {
        # The first Fibonacci number
        return(c(0))  
      } else if (n == 2) {
        # The first two Fibonacci numbers
        return(c(0, 1))  
      }
      
      # Initialize a vector of length n
      fib <- numeric(n)  
      fib[1] <- 0  
      fib[2] <- 1  
      
      # Calculate each subsequent Fibonacci number
      for (i in 3:n) 
      {
        fib[i] <- fib[i-1] + fib[i-2]  
      }
      
      # return the sequence
      return(fib)
    }

    # Example usage:
    fibonacci_sequence(10)
    ```

6.  Write an R function that takes a numeric vector as input and returns a vector where each element is doubled if it is even, and halved if it is odd.

    ```{r}
    modify_vector1 <- function(vec) 
    {
      n <- length(vec)
      out <- numeric(length = n)
      
      for(i in 1:n)
      {
        if(vec[i] %%2 == 0)
        {
          out[i] <- 2*vec[i]
        } else{
          out[i] <- vec[i]/2
        }
      }
      return(out)
    }

    # another method
    modify_vector2 <- function(vec)
    {
      # we can do it in one line using sapply
      sapply(vec, function(x) if (x %% 2 == 0) x * 2 else x / 2)
    }

    # Example usage
    vec <- c(1, 2, 3, 4, 5)
    modify_vector1(vec)
    modify_vector2(vec)

    ```

7.  Write a function that takes a numeric vector as input and returns the number of elements that are greater than the mean of the vector

    ```{r}
    count_greater_than_mean <- function(vec) 
    {
      mean_val <- mean(vec)
      sum(vec > mean_val)
    }

    # Example usage
    vec <- c(1, 2, 3, 4, 5, 10, 30)
    count_greater_than_mean(vec)
    ```

8.  

## Matrices

Matrices in R are described by its rows and columns. To define a matrix, we may use the `matrix` function in R.

```{r}
#| eval: TRUE
#| code-fold: FALSE
mat <- matrix(c(1,5,8,3,4,0), nrow = 3, ncol = 2)
mat
```

Accessing elements of the matrix can be done using square brackets (with two index placeholders)

```{r}
#| eval: TRUE
#| code-fold: FALSE
mat[1,2] # first row, 2nd column
mat[3,2]
```

1.  Write an R function that takes any n x n matrix and returns the sum of the elements in the upper triangular part of the matrix (excluding the diagonal)

    ```{r}
    {r eval=FALSE}

    sum_upper_triangular <- function(mat) {
      if (!is.matrix(mat) || nrow(mat) != ncol(mat)) {
        stop("Input must be a square matrix")
      }
      
      n <- nrow(mat)
      sum_upper <- 0
      
      for (i in 1:(n-1)) {
        for (j in (i+1):n) {
          sum_upper <- sum_upper + mat[i, j]
        }
      }
      
      return(sum_upper)
    }

    # Example usage
    mat <- matrix(1:25, nrow = 5, ncol = 5)
    mat
    sum_upper_triangular(mat)

    ```

2.  Define a 6×6 matrix with each element being the product of its row and column indices. Extract the submatrix from rows 2 to 4 and columns 3 to 5, and then calculate its inverse.

    ```{r eval = FALSE}
    #| eval: FALSE

    mat <- matrix(0, nrow = 6, ncol = 6)
    for (i in 1:6) {
      for (j in 1:6) {
        mat[i, j] <- i * j
      }
    }

    # Extract submatrix from rows 2 to 5 and columns 3 to 5
    submat <- mat[2:4, 3:5]

    # Calculate the inverse of the submatrix
    #inverse_submat <- solve(submat)

    # Display the inverse
    #inverse_submat

    ```

3.  Define a 10×10 matrix with all elements being the number 7. Then, replace the diagonal elements with the first 10 powers of 2.

    ```{r}

    # Create a 10x10 matrix with all elements being 7
    mat <- matrix(7, nrow = 10, ncol = 10)

    # Replace diagonal elements with the first 10 powers of 2
    diag(mat) <- 2^(0:9)

    # Display the matrix
    mat

    ```

## Simulations

1.  Write a function that simulates rolling two fair dice `n` times and returns the proportion of times the sum of the dice is 7.

    ```{r}
    roll_dice_simulation <- function(n) 
    {
      # Simulate rolling two dice n times
      dice1 <- sample(1:6, n, replace = TRUE)
      dice2 <- sample(1:6, n, replace = TRUE)
      
      # Calculate the sum of the two dice for each roll
      sum_of_dice <- dice1 + dice2
      
      # Count the number of times the sum is 7
      count_seven <- sum(sum_of_dice == 7)
      
      # Calculate the proportion of times the sum is 7
      proportion_seven <- count_seven / n
      
      return(proportion_seven)
    }

    # Example usage:
    roll_dice_simulation(n = 50)
    ```

2.  Write a function that simulates tossing a fair coin 20 times and returns the proportion of heads.

    ```{r}
    coin_toss_proportion <- function() {
      tosses <- sample(c("H", "T"), size = 20, replace = TRUE)
      proportion_heads <- sum(tosses == "H") / 20
      return(proportion_heads)
    }

    # Example usage
    set.seed(123)  # For reproducibility
    coin_toss_proportion()
    ```

3.  Write function that simulates rolling two fair dice `n = 100` times and returns the distribution of the sums of the dice. Plot a histogram of the distribution. Now change values of `n`, and see the change in histogram

    ```{r}
    prop_diesum = function(n)
    { 
      #initialise the frequency table 
      diesum= rep(0 ,12 )
      for( i in 1:n)
      {
        #take a random sample from die
        die1  = sample(1:6 , size = 1)
        die2  = sample(1:6 , size = 1)
        outcome= die1+die2
        
        #add the outcome to corresponding frequency table
        diesum[outcome] = diesum[outcome] + 1
      }
      return(diesum)
    }

    #calculate frequencies for different n 
    ds1e2 = prop_diesum(100)
    ds1e3 = prop_diesum(1e3)
    ds1e4 = prop_diesum(1e4)

    # make plots (side-by-side)

    par(mfrow = c(1,3))
    barplot(ds1e2, main = "Frequency of Dice Sum (n = 100)", xlab = "Sum of Dice", ylab = "Frequency", col = "skyblue", names.arg = 1:12)

    barplot(ds1e3, main = "Frequency of Dice Sum (n = 1000)", xlab = "Sum of Dice", ylab = "Frequency", col = "lightgreen", names.arg = 1:12)

    barplot(ds1e4, main = "Frequency of Dice Sum (n = 10000)", xlab = "Sum of Dice", ylab = "Frequency", col = "salmon", names.arg = 1:12)
    ```

4.  Write R simulation function `rolls()` for a fair die is rolled `n` times that returns 1 if at least 1 of the 6 values never appears and 0 otherwise. Then find the average value by running this 1000 times.

    ```{r}
    rolls = function(n)
    { 
      #initialise the frequency table 
      die = rep( 0 , 6)
      for( i in 1:n)
      {
        #take a random sample from die
        outcome = sample(1:6, size = 1) 
        #add the outcome to corresponding frequency table
        die[outcome] = die[outcome] + 1
      }
      #atleast one value never appeared
      if(min(die) == 0)
      {
        count = 1
      }
      else #all values appeared atleast ones 
      {
        count = 0
      }
      return(count)
    }


    #function to take average
    expectation = function(num)
    {
      store  = numeric(length = 1e3)
      for( i in 1:1e3)
      {
        store[i] = rolls(num)
      }
      return(mean(store))
    }

    #find the expectation 
    y = numeric(length = 50)
    for( i in 1:50)
    {
      y[i] = expectation(num = i)
    }

    #make the plot
    plot( x = 1:50  , y = y , main = "Probability vs no of rolls" , type = "o" , col = "blue" , ylab = "Expected Value" , xlab="Rolls")
    ```
