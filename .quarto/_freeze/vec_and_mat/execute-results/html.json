{
  "hash": "561a7bc464dd385e666a3debca3a5b82",
  "result": {
    "markdown": "# Vectors\n\nR is most suitable for vector based coding. Which means that many tasks that are done element-wise in languages like C/C++ can be done elegantly in R. Below are some exercises to get you started. A new vector can be declared in many ways, below is my default\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nnew <- numeric(length = 5)\nnew\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0 0 0 0 0\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\nnew_again <- c(1,4,6)\n```\n:::\n\n\nOne can access elements of a vector by using square brackets:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nnew_again[3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n:::\n\n\nBelow are some practice questions on this topic.\n\n## Questions\n\n1.  Write an R code to enumerate the squares of the first 100 natural numbers.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    nums <- 1:100\n    nums^2   # R is vectorized\n    ```\n    :::\n\n\n    \\\n\n2.  A sequence \"Dancing Numbers\" is defined as follows:\n\n    if $B_n$ is even: $$\n    B_{n+1} = \\dfrac{B_{n}}{2}\n    $$\n\n    else\\\n    $$\n    B_{n+1} = 3B_n - 1 \n    $$\n\n    Generate the first 100 dancing numbers given $B_0$ is 13.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    b0 <- 13\n    \n    B <- numeric(1e2)\n    \n    for(i in 1:100){\n      # Even\n      if (b0%%2 == 0){\n        b0 <- b0/2\n        B[i] = b0\n      }\n      # Odd\n      else{\n        b0 <- 3*b0-1\n        B[i] = b0\n      }\n    }\n    \n    B\n    ```\n    :::\n\n\n    \\\n\n3.  Write a function in R to calculate the sum of the first n natural numbers. Verify your result with the formula $\\frac{n(n+1)}{2}$\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    sum_of_natural_num = function(n)\n    {\n      # use for loop to access every number and sum them one by one in a varibale \n      sum = 0\n      for (i in 1:n)\n      {\n        sum = sum + i\n      }\n      return(sum)\n    }\n    ```\n    :::\n\n\n    \\\n\n4.  Write a function in R to calculate the arithmetic mean of a vector of numbers.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    arithmetic_mean = function(vec)\n    {\n      sum = sum(vec)\n      Ar_mean = sum/length(vec)\n      return(Ar_mean)\n    }\n    \n    # another way\n    arithmetic_mean <- function(vec) mean(vec)\n    ```\n    :::\n\n\n    \\\n\n5.  Write a function in R to calculate the variance of a vector of numbers. The (sample) variance of observations $x_1, x_2, \\dots, x_n$ is\n\n    $$\\text{Var}(x_1, x_2, \\dots, x_n) = \\frac{1}{n-1} \\sum_{i=1}^{n} (x_i - \\bar{x})^2 \\,,$$\n\n    where $\\bar{x} = n^{-1} \\sum_{i=1}^{n} x_i$. Verify with the built-in `var()` function.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    calculate_variance <- function(x) \n    {\n      n <- length(x)\n      mean_x <- mean(x)\n      var_x <- sum((x - mean_x)^2) / (n - 1)  # we can return values direct also \n      return(var_x)\n    }\n    \n    data <- c(1,5,3,8,6,8,5,4)\n    calculate_variance(data)\n    var(data)\n    ```\n    :::\n\n\n    \\\n\n6.  Create a vector of the first 500 even integers. Then, calculate the product of all elements in this vector.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # this is the vector\n    even_seq = seq(from = 2, by = 2 , length.out = 500)\n    # product of the elements\n    prod(even_seq)\n    ```\n    :::\n\n\n    \\\n\n7.  Define a vector of the first 1000 numbers in :\n\n    i.  Arithmetic progression of 7 with common difference of 13. That is, create the sequence $a_t$ such that $a_1 = 7$ and $a_{t+1} - a_{t} = 13$ for all $t \\geq 1$.\n\n\n        ::: {.cell}\n        \n        ```{.r .cell-code}\n        a1 <- 7\n        d <- 13\n        n <- 1000\n        arithmetic_progression <- a1 + (0:(n-1)) * d\n        ```\n        :::\n\n\n    ii. Geometric progression of 7 with common ratio of 1/13. That is, create the sequence $a_t$ such that $a_t = 7$ and $a_{t+1}/a_t = 1/13$\n\n\n        ::: {.cell}\n        \n        ```{.r .cell-code}\n        a1 <- 7\n        r <- 1/13\n        geometric_progression <- a1 * r^(0:(n-1))\n        ```\n        :::\n\n\n        \\\n\n8.  Write a function which generates first `n` numbers in Fibonacci sequence.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    fibonacci_sequence <- function(n) \n    {\n      if (n <= 0) {\n        return(\"Enter a natural number\")  \n      } else if (n == 1) {\n        # The first Fibonacci number\n        return(c(0))  \n      } else if (n == 2) {\n        # The first two Fibonacci numbers\n        return(c(0, 1))  \n      }\n      \n      # Initialize a vector of length n\n      fib <- numeric(n)  \n      fib[1] <- 0  \n      fib[2] <- 1  \n      \n      # Calculate each subsequent Fibonacci number\n      for (i in 3:n) \n      {\n        fib[i] <- fib[i-1] + fib[i-2]  \n      }\n      \n      # return the sequence\n      return(fib)\n    }\n    \n    # Example usage:\n    fibonacci_sequence(10)\n    ```\n    :::\n\n\n    \\\n\n9.  Create one vector `vec1` with $1^{st}$ 8 odd numbers and `vec2` with $1^{st}$ 8 Fibonacci numbers(remember to start from zero) and then perform the following operations:\n\n    a.  element-wise multiplication\n\n    b.  element-wise addition\n\n    c.  element-wise subtractions (`vec1 - vec2`)\n\n    d.  element-wise division\n\n    e.  elements of `vec1` raised to the power of elements of `vec2`\n\n    f.  elements of `vec1` modulo elements of `vec2`\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # Define vec1 with the first 8 odd numbers using a loop\n    vec1 <- numeric(8)\n    for (i in 1:8) \n    {\n      vec1[i] <- 2 * i - 1\n    }\n    \n    # Define vec2 with the first 8 Fibonacci numbers using a loop\n    vec2 <- numeric(8)\n    vec2[1] <- 0\n    vec2[2] <- 1\n    for (i in 3:8) \n    {\n      vec2[i] <- vec2[i - 1] + vec2[i - 2]\n    }\n    \n    # Print vec1 and vec2 to verify\n    vec1\n    vec2\n    \n    # a. Element-wise multiplication\n    vec_mult <- vec1 * vec2\n    vec_mult\n    \n    # b. Element-wise addition\n    vec_add <- vec1 + vec2\n    vec_add\n    \n    # c. Element-wise subtraction\n    vec_sub <- vec1 - vec2\n    vec_sub\n    \n    # d. Element-wise division\n    vec_div <- vec1 / vec2\n    vec_div\n    \n    # e. Element-wise exponentiation\n    vec_exp <- vec1^vec2\n    vec_exp\n    \n    # f. Element-wise modulo operation\n    vec_mod <- vec1 %% vec2\n    vec_mod\n    ```\n    :::\n\n\n10. Do same as question 3 but now `vec2` contains only first 4 Fibonacci numbers rest everything is the same. Will it even work or throw error if works then are there any differences you observe after doing same operations?\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    {r}\n    # Define vec1 with the first 8 odd numbers using a loop\n    vec1 <- numeric(8)\n    for (i in 1:8) \n    {\n      vec1[i] <- 2 * i - 1\n    }\n    \n    # Define vec2 with the first 4 Fibonacci numbers using a loop\n    vec2 <- numeric(4)\n    vec2[1] <- 0\n    vec2[2] <- 1\n    for (i in 3:4) \n    {\n      vec2[i] <- vec2[i - 1] + vec2[i - 2]\n    }\n    \n    \n    # NOTICE, NO ERROR!\n    \n    # Print vec1 and vec2 to verify\n    vec1\n    vec2\n    \n    # a. Element-wise multiplication\n    vec_mult <- vec1 * vec2\n    vec_mult\n    \n    # b. Element-wise addition\n    vec_add <- vec1 + vec2\n    vec_add\n    \n    # c. Element-wise subtraction\n    vec_sub <- vec1 - vec2\n    vec_sub\n    \n    # d. Element-wise division\n    vec_div <- vec1 / vec2\n    vec_div\n    \n    # e. Element-wise exponentiation\n    vec_exp <- vec1^vec2\n    vec_exp\n    \n    # f. Element-wise modulo operation\n    vec_mod <- vec1 %% vec2\n    vec_mod\n    ```\n    :::\n\n\n11. Each new term in the Tribonacci Sequence is generated by adding the previous three terms. By starting with $1, 1 \\text{ and } 2$, and considering the terms in the sequence whose values does not exceed $5$ million, find the sum of all even valued terms.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    t1 <- 1\n    t2 <- 1\n    t3 <- 2\n    mx <- 5000000\n    add <- 2\n    while(TRUE){\n      tn <- t1 + t2 + t3\n      if(tn > mx)\n      {\n        break\n      }\n      if(tn %% 2 == 0)\n      {\n        add <- add + tn\n      }\n      t1 <- t2\n      t2 <- t3\n      t3 <- tn\n    }\n    add\n    ```\n    :::\n\n\n12. Write an R function that takes a numeric vector as input and returns a vector where each element is doubled if it is even, and halved if it is odd.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    modify_vector1 <- function(vec) \n    {\n      n <- length(vec)\n      out <- numeric(length = n)\n      \n      for(i in 1:n)\n      {\n        if(vec[i] %%2 == 0)\n        {\n          out[i] <- 2*vec[i]\n        } else{\n          out[i] <- vec[i]/2\n        }\n      }\n      return(out)\n    }\n    \n    # another method\n    modify_vector2 <- function(vec)\n    {\n      # we can do it in one line using sapply\n      sapply(vec, function(x) if (x %% 2 == 0) x * 2 else x / 2)\n    }\n    \n    # Example usage\n    vec <- c(1, 2, 3, 4, 5)\n    modify_vector1(vec)\n    modify_vector2(vec)\n    ```\n    :::\n\n\n    \\\n\n13. Write a function that takes a numeric vector as input and returns the number of elements that are greater than the mean of the vector\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    count_greater_than_mean <- function(vec) \n    {\n      mean_val <- mean(vec)\n      sum(vec > mean_val)\n    }\n    \n    # Example usage\n    vec <- c(1, 2, 3, 4, 5, 10, 30)\n    count_greater_than_mean(vec)\n    ```\n    :::\n\n\n    \\\n\n14. Write an R function that generates a vector of the first 100 prime numbers and then returns the vector with only the prime numbers that are also Fibonacci numbers.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # Function to check if prime number\n    # if it is divisible by any number other than 1 and itself\n    is_prime <- function(n)\n    {\n      if (n <= 1) \n      {\n        return(FALSE)\n      }\n      for (i in 2:sqrt(n)) \n      {\n        if (n %% i == 0) \n        {\n          return(FALSE)\n        }\n      }\n      return(TRUE)\n    }\n    \n    # Function to generate the first n prime numbers\n    generate_primes <- function(n)\n    {\n      primes <- numeric(n)\n      count <- 0\n      num <- 2\n      while (count < n) \n      {\n        # check if new number is prime or not\n        if (is_prime(num)) \n        {\n          count <- count + 1\n          primes[count] <- num\n        }\n        num <- num + 1\n      }\n      return(primes)\n    }\n    \n    # Function to generate Fibonacci numbers up to a maximum value\n    generate_fibonacci <- function(max_val) \n    {\n      fibs <- c(0, 1)\n      while (TRUE) {\n        next_fib <- tail(fibs, 2)[1] + tail(fibs, 2)[2]\n        if (next_fib > max_val) break\n        fibs <- c(fibs, next_fib)\n      }\n      return(fibs)\n    }\n    \n    # Main function to get prime Fibonacci numbers\n    prime_fibonacci_numbers <- function() \n    {\n      # Generate the first 100 prime numbers\n      primes <- generate_primes(100)\n      \n      # Generate Fibonacci numbers up to the maximum prime value\n      max_prime <- max(primes)\n      fibs <- generate_fibonacci(max_prime)\n      \n      # Get prime Fibonacci numbers\n      prime_fibs <- primes[primes %in% fibs]\n      \n      return(prime_fibs)\n    }\n    ```\n    :::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}