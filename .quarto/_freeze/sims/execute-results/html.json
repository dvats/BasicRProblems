{
  "hash": "5ecf3e3d6b0cdea9b5e794fdf1415689",
  "result": {
    "markdown": "# Simulations\n\nMuch of what we do in the program and in statistical coding revolves around simulating experiments. This means, repeated a random experiment, potentially many times.\n\nBelow are some problems on these themes.\n\n## Questions\n\n1.  In a bag, there are 5 red balls, 3 green balls, and 2 blue balls. Write an R function to randomly draw a ball from the bag.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    draw_ball <- function() \n    {\n      bag <- c(rep(\"Red\", 5), rep(\"Green\", 3), rep(\"Blue\", 2))\n      return(sample(bag, 1))\n    }\n    ```\n    :::\n\n\n    \\\n\n2.  Simulate a random walk of 1000 steps and plot the path. A random walk is such that $x_0 = 0$, and $x_t = x_{t-1} \\pm 1$ with equal probability\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    simulate_random_walk <- function(steps) \n    {\n      walk <- numeric(length = steps)\n      walk[1] <- 0\n      for(t in 2:steps)\n      {\n        choices <- sample(c(-1, 1), 1)\n        walk[t] <- walk[t-1] + choices\n      }\n      plot(walk, type = \"l\", main = \"Random Walk\", xlab = \"Step\", ylab = \"Position\")\n    }\n    simulate_random_walk(1000)\n    ```\n    :::\n\n\n    \\\n\n3.  Write a function that simulates rolling two fair dice `n` times and returns the proportion of times the sum of the dice is 7.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    roll_dice_simulation <- function(n) \n    {\n      # Simulate rolling two dice n times\n      dice1 <- sample(1:6, n, replace = TRUE)\n      dice2 <- sample(1:6, n, replace = TRUE)\n      \n      # Calculate the sum of the two dice for each roll\n      sum_of_dice <- dice1 + dice2\n      \n      # Count the number of times the sum is 7\n      count_seven <- sum(sum_of_dice == 7)\n      \n      # Calculate the proportion of times the sum is 7\n      proportion_seven <- count_seven / n\n      \n      return(proportion_seven)\n    }\n    \n    # Example usage:\n    roll_dice_simulation(n = 50)\n    ```\n    :::\n\n\n    \\\n\n4.  Write a function that simulates tossing a fair coin 20 times and returns the proportion of heads.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    coin_toss_proportion <- function() {\n      tosses <- sample(c(\"H\", \"T\"), size = 20, replace = TRUE)\n      proportion_heads <- sum(tosses == \"H\") / 20\n      return(proportion_heads)\n    }\n    \n    # Example usage\n    set.seed(123)  # For reproducibility\n    coin_toss_proportion()\n    ```\n    :::\n\n\n    \\\n\n5.  Write function that simulates rolling two fair dice `n = 100` times and returns the distribution of the sums of the dice. Plot a histogram of the distribution. Now change values of `n`, and see the change in histogram\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    prop_diesum = function(n)\n    { \n      #initialise the frequency table \n      diesum= rep(0 ,12 )\n      for( i in 1:n)\n      {\n        #take a random sample from die\n        die1  = sample(1:6 , size = 1)\n        die2  = sample(1:6 , size = 1)\n        outcome= die1+die2\n        \n        #add the outcome to corresponding frequency table\n        diesum[outcome] = diesum[outcome] + 1\n      }\n      return(diesum)\n    }\n    \n    #calculate frequencies for different n \n    ds1e2 = prop_diesum(100)\n    ds1e3 = prop_diesum(1e3)\n    ds1e4 = prop_diesum(1e4)\n    \n    # make plots (side-by-side)\n    \n    par(mfrow = c(1,3))\n    barplot(ds1e2, main = \"Frequency of Dice Sum (n = 100)\", xlab = \"Sum of Dice\", ylab = \"Frequency\", col = \"skyblue\", names.arg = 1:12)\n    \n    barplot(ds1e3, main = \"Frequency of Dice Sum (n = 1000)\", xlab = \"Sum of Dice\", ylab = \"Frequency\", col = \"lightgreen\", names.arg = 1:12)\n    \n    barplot(ds1e4, main = \"Frequency of Dice Sum (n = 10000)\", xlab = \"Sum of Dice\", ylab = \"Frequency\", col = \"salmon\", names.arg = 1:12)\n    ```\n    :::\n\n\n    \\\n\n6.  Write R simulation function `rolls()` for a fair die is rolled `n` times that returns 1 if at least 1 of the 6 values never appears and 0 otherwise. Then find the average value by running this 1000 times.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    rolls = function(n)\n    { \n      #initialise the frequency table \n      die = rep( 0 , 6)\n      for( i in 1:n)\n      {\n        #take a random sample from die\n        outcome = sample(1:6, size = 1) \n        #add the outcome to corresponding frequency table\n        die[outcome] = die[outcome] + 1\n      }\n      #atleast one value never appeared\n      if(min(die) == 0)\n      {\n        count = 1\n      }\n      else #all values appeared atleast ones \n      {\n        count = 0\n      }\n      return(count)\n    }\n    \n    \n    #function to take average\n    expectation = function(num)\n    {\n      store  = numeric(length = 1e3)\n      for( i in 1:1e3)\n      {\n        store[i] = rolls(num)\n      }\n      return(mean(store))\n    }\n    \n    #find the expectation \n    y = numeric(length = 50)\n    for( i in 1:50)\n    {\n      y[i] = expectation(num = i)\n    }\n    \n    #make the plot\n    plot( x = 1:50  , y = y , main = \"Probability vs no of rolls\" , type = \"o\" , col = \"blue\" , ylab = \"Expected Value\" , xlab=\"Rolls\")\n    ```\n    :::\n\n\n    \\\n\n7.  Zehaan and Aditya are two constantly bickering roommates who always fight for the only available desk in the room. The rule that they have devised is as follows:\n\n    Each morning, they throw two dice, if the sum of the numbers on the resulting faces is a *Prime Number* then one of them gets the desk else the other. Since the odds are not equally stacked, they flip a coin before this to decide who get's the prime number odds and who does not.\n\n    Write an R function to determine who wins this daily struggle. Output: `Zehaan` or `Aditya` accordingly\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    daily.desk <- function()\n    {\n      d1 <- sample(1:6, 1)\n      d2 <- sample(1:6, 1)\n      \n      sum.dice <- d1 + d2\n      \n      coin <- sample(1:2, 1)\n    \n      if (coin == 1){\n        # Zehaan Gets prime odds\n        if (sum.dice %in% c(2,3,5,7,11)){\n          print(\"Zehaan\")\n        }else{\n          print(\"Aditya\")\n        }\n      }else{\n        # Aditya Gets prime odds\n        if (sum.dice %in% c(2,3,5,7,11)){\n          print(\"Aditya\")\n        }else{\n          print(\"Zehaan\")\n        }\n      }\n    }\n    daily.desk()\n    ```\n    :::\n\n\n    \\\n\n8.  Yash, being very lazy, decides to study for his exam on the last day. There are $12$ chapters in total, but due to time constraints, he can only thoroughly study $8$ of them, chosen randomly. In tomorrow's exam, $30$ questions will be asked. Each question has an independent $0.08$ probability of coming from chapters $1$ to $10$ and a $0.1$ probability of coming from chapters $11$ and $12$ each. Yash can only answer questions from the chapters he studied, with each correct answer scoring $+1$. The passing percentage is $70\\%$. Write an $\\text{R}$ code to determine if Yash will pass the exam. Print \"pass\" if he does, and \"fail\" otherwise.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    total <- 12\n    prob_questions <- c(rep(0.08, 10), 0.1, 0.1)\n    questions <- sample(1:total, prob = prob_questions, replace = TRUE, size = 30)\n    canSolve <- sample(1:total, size = 8)\n    score = sum(questions %in% canSolve) / 30\n    if(score >= 0.7){\n      print(\"pass\")\n    } else{\n      print(\"fail\")\n    }\n    ```\n    :::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}